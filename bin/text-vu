#!/usr/bin/env python3
# A script to display stereo audio peak dB level from an audio capture device as
# text to stdout

# Strongly recommend using a sound server like PulseAudio or PipeWire, otherwise
# you'll be dealing with exclusing access to ALSA devices named things like:
# snd_rpi_hifiberry_dacplusadcpro: HiFiBerryDAC+ADCProHiFi multicodec-0 (hw:0,0)
# or dsnoop devices that can only do 16bit at 48k.

# (c) David Stark 2022

import audioop
import math

import pyaudio

# ----- Edit these to taste -----
DEVICE = "pipewire"  # pyaudio/PortAudio device name
DB_PER_PIXEL = 2  # dB volume difference between pixels
ORANGE_LIMIT = -10  # White - orange transition dB volume
UPDATES_PER_SEC = 5  # Display refresh rate per-second (approx)
FORMAT = pyaudio.paInt16  # 16 bit is more than enough here
RATE = 48000  # 48k
# -----         End         -----


CHANNELS = 2  # Stereo only!
BLOCK = int(RATE / UPDATES_PER_SEC)
SAMPLE_WIDTH = pyaudio.get_sample_size(FORMAT)
SAMPLE_VALUES = 2 ** (SAMPLE_WIDTH * 8)
SAMPLE_MAX = (SAMPLE_VALUES / 2) - 1
NEG_INF = -759  #  32bit float min dB - 1


p = pyaudio.PyAudio()

# Find the numeric ALSA device index from the name
for i in range(p.get_device_count()):
    if p.get_device_info_by_index(i).get("name") == DEVICE:
        sc_index = i
        break

stream = p.open(
    format=FORMAT,
    channels=CHANNELS,
    rate=RATE,
    input=True,
    frames_per_buffer=BLOCK,
    input_device_index=sc_index,
)

while True:
    data = stream.read(BLOCK, exception_on_overflow=False)
    max_l = audioop.max(audioop.tomono(data, SAMPLE_WIDTH, 1, 0), SAMPLE_WIDTH)
    max_r = audioop.max(audioop.tomono(data, SAMPLE_WIDTH, 0, 1), SAMPLE_WIDTH)
    # Silent blocks are -infinite dB because maths
    if max_l == 0:
        db_l = NEG_INF
    else:
        db_l = 20 * math.log10(max_l / SAMPLE_MAX)
    if max_r == 0:
        db_r = NEG_INF
    else:
        db_r = 20 * math.log10(max_r / SAMPLE_MAX)
    print(f"{db_l:07.2f} L DB R {db_r:07.2f}")
